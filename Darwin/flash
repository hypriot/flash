#!/bin/bash
# Flash Raspberry Pi SD card images on your Mac
# Stefan Scherer - scherer_stefan@icloud.com
# MIT License


usage()
{
cat << EOF
usage: $0 [options] name-of-rpi.img

Flash a local or remote Raspberry Pi SD card image.

OPTIONS:
   --help|-h      Show this message
   --bootconf|-C  Copy this config file to /boot/config.txt
   --config|-c    Copy this config file to /boot/occidentalis.txt
   --hostname|-n  Set hostname for this SD image
   --ssid|-s      Set WiFi SSID for this SD image
   --password|-p  Set WiFI password for this SD image

The config file occidentalis.txt should look like

# hostname for your Hypriot Raspberry Pi:
hostname=hypriot-pi

# basic wireless networking options:
wifi_ssid=SSID
wifi_password=12345

The boot config file config.txt has name/value pairs such as:

max_usb_current=1

EOF
exit 1
}

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --verbose) args="${args}-v ";;
    --config) args="${args}-c ";;
    --hostname) args="${args}-n ";;
    --ssid) args="${args}-s ";;
    --password) args="${args}-p ";;
    --bootconf) args="${args}-C ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- $args
# now we can process with getopt
while getopts ":hc:n:s:p:C:" opt; do
  case $opt in
    h)  usage ;;
    c)  OCCI_CONFIG=$OPTARG ;;
    C)  BOOT_CONF=$OPTARG ;;
    n)  SD_HOSTNAME=$OPTARG ;;
    s)  WIFI_SSID=$OPTARG ;;
    p)  WIFI_PASSWORD=$OPTARG ;;
    \?) usage ;;
    :)
    echo "option -$OPTARG requires an argument"
    usage
    ;;
  esac
done
shift $((OPTIND -1))

beginswith() { case $2 in $1*) true;; *) false;; esac; }
endswith() { case $2 in *$1) true;; *) false;; esac; }

image=$1

occi=$2

if [ "$1" == "--help" ]; then
  usage
fi

filename=$(basename "${image}")
extension="${filename##*.}"
filename="${filename%.*}"

if [ -f "/tmp/${filename}" ]; then
  image=/tmp/${filename}
  echo "Using cached image ${image}"
else
  if beginswith http:// "${image}" || beginswith https:// "${image}"; then
    which curl >/dev/null || (echo "Error: curl not found. Aborting" && exit 1)
    echo "Downloading ${image} ..."
    curl -L -o /tmp/image.img.${extension} "${image}"
    image=/tmp/image.img.${extension}
  fi

  if beginswith s3:// "${image}"; then
    which aws >/dev/null || (echo "Error: aws not found. Aborting" && exit 1)
    echo "Downloading ${image} ..."
    aws s3 cp "${image}" /tmp/image.img.${extension}
    image=/tmp/image.img.${extension}
  fi

  if [ ! -f "${image}" ]; then
    echo "File not found."
    exit 10
  fi

  if [[ "$(file ${image})" == *"Zip archive"* ]]; then
    echo "Uncompressing ${image} ..."
    unzip -o "${image}" -d /tmp
    image=$(unzip -l "${image}" | grep --color=never -v Archive: | grep --color=never img | cut -c 29-)
    image="/tmp/${image}"
    echo "Use ${image}"
  fi
fi

if [[ "${OSTYPE}" != "darwin"* ]]; then
  echo "This version does only support Mac."
  echo "Please download correct version from https://github.com/hypriot/flash"
  exit 11
fi

while true; do
  # try to find the correct disk of the inserted SD card
  disk=`df | grep --color=never -e "disk[0-9]s1" | grep --color=never Volumes | cut -c 6-10`
  if [ "${disk}" == "" ]; then
    echo "No SD card found. Please insert SD card, I'll wait for it..."
    while [ "${disk}" == "" ]; do
      sleep 1
      disk=`df | grep --color=never -e "disk[0-9]s1" | grep --color=never Volumes | cut -c 6-10`
    done
  fi

  df -h
  while true; do
    echo ""
    read -p "Is /dev/${disk}s1 correct? " yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) exit;;
      * ) echo "Please answer yes or no.";;
    esac
  done

  echo "Unmounting ${disk} ..."
  diskutil unmountDisk /dev/${disk}s1
  diskutil unmountDisk /dev/${disk}
  writable=$(ls -l /dev/${disk}s1 | cut -c 3)
  if [ "$writable" == "w" ]; then
    break
  else
    afplay /System/Library/Sounds/Basso.aiff
    echo "üëé  The SD card is write protected. Please eject, remove protection and insert again."
  fi
done

echo "Flashing ${image} to ${disk} ..."
pv=`which pv 2>/dev/null`
if [ $? -eq 0 ]; then
  # this sudo here is used for a login without pv's progress bar
  # hiding the password prompt
  size=`sudo stat -f %z ${image}`
  cat ${image} | pv -s ${size} | sudo dd bs=1m of=/dev/r${disk}
else
  echo "No `pv` command found, so no progress available."
  echo "Press CTRL+T if you want to see the current info of dd command."
  sudo dd bs=1m if=${image} of=/dev/r${disk}
fi

boot=$(df | grep --color=never /dev/${disk}s1 | sed 's,.*/Volumes,/Volumes,')
if [ "${boot}" == "" ]; then
  while [ "${boot}" == "" ]; do
    sleep 1
    boot=$(df | grep --color=never /dev/${disk}s1 | sed 's,.*/Volumes,/Volumes,')
  done
fi

if [ -f "${OCCI_CONFIG}" ]; then
  echo "Copying ${OCCI_CONFIG} to ${boot}/occidentalis.txt ..."
  cp "${OCCI_CONFIG}"  "${boot}/occidentalis.txt"
fi

if [[ -f "${BOOT_CONF}" ]]; then
  echo "Copying ${BOOT_CONF} to ${boot}/config.txt ..."
  sudo cp "${BOOT_CONF}" "${boot}/config.txt"
fi

if [ ! -z "${SD_HOSTNAME}" ]; then
  echo "Set hostname=${SD_HOSTNAME}"
  sed -i "" -e "s/.*hostname.*=.*\$/hostname=${SD_HOSTNAME}/" "${boot}/occidentalis.txt"
fi
if [ ! -z "${WIFI_SSID}" ]; then
  echo "Set wifi_ssid=${WIFI_SSID}"
  sed -i "" -e "s/.*wifi_ssid.*=.*\$/wifi_ssid=${WIFI_SSID}/" "${boot}/occidentalis.txt"
fi
if [ ! -z "${WIFI_PASSWORD}" ]; then
  echo "Set wifi_password=${WIFI_PASSWORD}"
  sed -i "" -e "s/.*wifi_password.*=.*\$/wifi_password=${WIFI_PASSWORD}/" "${boot}/occidentalis.txt"
fi

echo "Unmounting and ejecting ${disk} ..."
sleep 1
diskutil unmountDisk /dev/${disk}s1
diskutil unmountDisk /dev/${disk}s2
diskutil eject /dev/${disk}
if [ $? -eq 0 ]; then
  afplay /System/Library/Sounds/Bottle.aiff
  echo "üç∫  Finished."
else
  afplay /System/Library/Sounds/Basso.aiff
  echo "üëé  Someting went wrong."
fi
